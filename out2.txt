MySQLのリストアを開始します。
アプリのコンテナの再起動を開始します。
ローカル環境でのコンテナ再起動を開始します。
#0 building with "desktop-linux" instance using docker driver

#1 [backend internal] load build definition from Dockerfile.dev
#1 transferring dockerfile: 260B done
#1 DONE 0.0s

#2 [backend auth] backend:pull token for 42tokyo2508.azurecr.io
#2 DONE 0.0s

#3 [backend internal] load metadata for 42tokyo2508.azurecr.io/backend:base
#3 DONE 0.2s

#4 [backend internal] load .dockerignore
#4 transferring context: 162B done
#4 DONE 0.0s

#5 [backend 1/5] FROM 42tokyo2508.azurecr.io/backend:base@sha256:9312e8b7d16b80dd6deb24cac61988d775f3c82cdf34e6e7d952bb27c349253c
#5 resolve 42tokyo2508.azurecr.io/backend:base@sha256:9312e8b7d16b80dd6deb24cac61988d775f3c82cdf34e6e7d952bb27c349253c done
#5 DONE 0.0s

#6 [backend internal] load build context
#6 transferring context: 13.77kB done
#6 DONE 0.0s

#7 [backend 2/5] COPY go.mod go.sum ./
#7 CACHED

#8 [backend 3/5] RUN go mod download
#8 CACHED

#9 [backend 4/5] COPY . .
#9 DONE 0.0s

#10 [backend 5/5] RUN go build -a -o /app/server ./cmd
#10 0.096 go: warning: ignoring go.mod in $GOPATH /go
#10 DONE 6.4s

#11 [backend] exporting to image
#11 exporting layers
#11 exporting layers 3.8s done
#11 exporting manifest sha256:99a700167dd19435dbcf06ddc27b77111f08a4a0bb6af2397801fd2db05575c0
#11 exporting manifest sha256:99a700167dd19435dbcf06ddc27b77111f08a4a0bb6af2397801fd2db05575c0 done
#11 exporting config sha256:b66606e059bd2f8d458e7264e671e8dff8c932235b383fb643d2070690dbf1e2 done
#11 exporting attestation manifest sha256:a94fa207179181cd8ff132608b95ec37aacfeacfcdccbe0ab9ede8385b362660 done
#11 exporting manifest list sha256:c06561187f13ee53a11249b23cb97ffb8057d87a47069a2012664df0247e99c3 done
#11 naming to docker.io/library/webapp-backend:latest done
#11 unpacking to docker.io/library/webapp-backend:latest
#11 unpacking to docker.io/library/webapp-backend:latest 1.2s done
#11 DONE 5.0s

#12 [backend] resolving provenance for metadata file
#12 DONE 0.0s

#13 [frontend internal] load build definition from Dockerfile.dev
#13 transferring dockerfile: 200B done
#13 DONE 0.0s

#14 [frontend auth] frontend:pull token for 42tokyo2508.azurecr.io
#14 DONE 0.0s

#15 [frontend internal] load metadata for 42tokyo2508.azurecr.io/frontend:base
#15 DONE 0.4s

#16 [frontend internal] load .dockerignore
#16 transferring context: 169B done
#16 DONE 0.0s

#17 [frontend internal] load build context
#17 transferring context: 138B done
#17 DONE 0.0s

#18 [frontend 1/3] FROM 42tokyo2508.azurecr.io/frontend:base@sha256:11746d74e03ac3016722bc112221970c34baf958251ed7867838b399584bed18
#18 resolve 42tokyo2508.azurecr.io/frontend:base@sha256:11746d74e03ac3016722bc112221970c34baf958251ed7867838b399584bed18 done
#18 DONE 0.0s

#19 [frontend 2/3] WORKDIR /usr/src/frontend
#19 CACHED

#20 [frontend 3/3] COPY package.json yarn.lock ./
#20 CACHED

#21 [frontend] exporting to image
#21 exporting layers done
#21 exporting manifest sha256:3a1f6069fccf1a9c6fd5da0835e5103c47931446d27bc780f7aa38c83c8fae01 done
#21 exporting config sha256:c898f683125720c1c196aaa1d2e350dfacbdd1f43ebd6a41c5258400a49af4fd done
#21 exporting attestation manifest sha256:a2afb19cdd6b227e64af28c7a084b4035e0b65bcb00c1ddff494e32d43c44ee1 done
#21 exporting manifest list sha256:ed9811248191015d7d52e6bf342853d7294249558ec6ab52ec07b7457d442ed6 done
#21 naming to docker.io/library/webapp-frontend:latest done
#21 unpacking to docker.io/library/webapp-frontend:latest done
#21 DONE 0.0s

#22 [frontend] resolving provenance for metadata file
#22 DONE 0.0s
コンテナの再起動に成功しました。
データベース(42tokyo2508-db)を再作成します...
リストアを実行します...
リストアに成功しました。
MySQLのマイグレーションを開始します。
0_sample.sqlを適用します...
マイグレーションに成功しました。
E2Eテストを開始します。
[2K[1G[1myarn run v1.22.22[22m
[2K[1G[2m$ playwright test[22m

[2mRunning [22m4[2m tests using [22m1[2m worker[22m

📝 実行予定テスト数: 4
[1A[2K[1/4] [chromium] › tests/auth.test.ts:4:7 › Auth (smoke) › ログイン成功 → /product へ遷移
🧪 テスト: ログイン成功 → /product へ遷移 -> passed
[1A[2K[2/4] [chromium] › tests/auth.test.ts:17:7 › Auth (smoke) › 誤ったパスワード → エラーメッセージ表示＆/loginに留まる
🧪 テスト: 誤ったパスワード → エラーメッセージ表示＆/loginに留まる -> passed
[1A[2K[3/4] [chromium] › tests/orders.test.ts:5:7 › GET api/robot/delivery-plan?capacity=100 › 配送計画を取得できること (200: OK)
🧪 テスト: 配送計画を取得できること (200: OK) -> passed
[1A[2K[4/4] [chromium] › tests/product.test.ts:6:7 › Product page (real backend over Docker network) › 検索のリクエスト/レスポンス内容とUI反映→注文送信(alert)
[1A[2K[2m[chromium] › tests/product.test.ts:6:7 › Product page (real backend over Docker network) › 検索のリクエスト/レスポンス内容とUI反映→注文送信(alert)[22m
総件数: [33m139[39m

🧪 テスト: 検索のリクエスト/レスポンス内容とUI反映→注文送信(alert) -> passed
[1A[2K[32m  4 passed[39m[2m (6.7s)[22m
📊 テスト結果: status=passed
✅ 全てのE2Eテストが成功しました。証跡を生成中...
📝 テスト成功証跡を生成しました
[2K[1GDone in 7.17s.
Final Score: 913
